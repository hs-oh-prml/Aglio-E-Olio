#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int sosu(int num) {

    if (num == 0 || num == 1) {
        return 0;
    }
    for (int i = 2; i < ((num / 2)+1); i++) {
        if (num%i == 0) {
            return 0;
        }
    }
    return 1;
}

int combi(vector<int> n, int index) {
    // 0과1을 저장 할 벡터 생성
    vector<int> ind;
    int count = 0;
    int k = index;

    sort(n.begin(), n.end());

    for (int i = 0; i < k; i++) {
        ind.push_back(1);
    }

    for (int i = 0; i < n.size() - k; i++) {
        ind.push_back(0);
    }

    sort(ind.begin(), ind.end());
    vector<int> check;
    do {
        // 출력
        vector<int> str;
        for (int i = 0; i < ind.size(); i++) {
            if (ind[i] == 1) {
                str.push_back(n[i]);
            }
        }

        do {
            string temp = "";
            for (int i = 0; i < str.size(); i++) {
                temp += to_string(str[i]);
            }

            if (temp.at(0) != '0') {
                int iii = stoi(temp);
                if (find(check.begin(), check.end(), iii) != check.end()) {
                    /* v contains x */
                }
                else {
                    /* v does not contain x */
                    count += sosu(iii);
                    check.push_back(iii);
                }       
            }

        }while(next_permutation(str.begin(), str.end()));
        //int iii = stoi(str);
        //count += sosu(iii);

    } while (next_permutation(ind.begin(), ind.end()));
    return count;
}

int solution(string numbers) {
    int answer = 0;
    int length = numbers.length();

    // first, string to string Vector & sort
    vector<int> intV;
    for(int i = 0 ; i < length; i++){
        string a;
        a +=  numbers.at(i);
        int temp = stoi(a);
        intV.push_back(temp);
    }
    sort(intV.begin(), intV.end());

    //second, for문으로 자릿수만큼 돌려서 소수판별 대상이 되는 숫자 만들기

    //third, check int Vector sosu or not
    int count = 0;
    //count += sosu(0);

    //copy
    vector<int> tempV = intV;
    for(int i = 0; i < intV.size(); i++){
        //set root
        count += combi(tempV, i+1);
    }

    return count;
}}}